openapi: 3.0.3
info:
  contact:
    name: Bernhard Wallisch
    url: https://www.technikum-wien.at/personal/bernhard-wallisch/
  title: Paperless REST-Server
  version: 1.0.0
servers:
- url: localhost:8081
paths:
  /api/documents/post_document:
    post:
      operationId: postDocument
      requestBody:
        content:
          multipart/form-data:
            encoding:
              file:
                contentType: application/pdf
                style: form
            schema:
              $ref: '#/components/schemas/postDocument_request'
      responses:
        "200":
          description: Document successfully uploaded.
        "400":
          description: Document upload failed due to bad request!
      summary: Upload a document
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /api/documents:
    get:
      operationId: getDocuments
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents'
          description: Success
      summary: Return a list of documents
      x-accepts:
      - application/json
  /api/documents/search:
    get:
      operationId: searchDocumentContent
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/documents'
          description: Found documents which match the search input
        "204":
          description: No content found
      summary: Retrieve list of documents which match the search input
      x-accepts:
      - application/json
  /api/documents/metadata/{documentId}:
    put:
      operationId: updateMetaData
      parameters:
      - description: The id of the document
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/updateMetaData_request'
      responses:
        "404":
          description: Document does not exist with this id!
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Metadata updated successfully
      summary: Updates the Metadata of a document
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /api/documents/{id}:
    delete:
      operationId: deleteDocument
      parameters:
      - description: The id of the document
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Document deleted successfully
        "404":
          description: Document does not exist with this id!
      summary: Delete a document by id
      x-accepts:
      - application/json
    get:
      operationId: getDocument
      parameters:
      - description: The id of the document
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/document'
          description: Success
        "404":
          description: Document does not exist with this id!
      summary: Retrieve a document by id
      x-accepts:
      - application/json
components:
  schemas:
    document:
      example:
        path: path
        author: author
        created: created
        id: 0
        title: title
        content: content
      properties:
        id:
          description: The id of the document
          type: integer
        title:
          description: The title of the document
          type: string
        author:
          description: The author of the document's contents
          type: string
        created:
          type: string
        content:
          description: Content of the document
          type: string
        path:
          description: File Path
          type: string
      required:
      - title
      type: object
    documents:
      items:
        $ref: '#/components/schemas/document'
      type: array
    postDocument_request:
      properties:
        author:
          nullable: false
          type: string
        title:
          nullable: false
          type: string
        file:
          format: binary
          nullable: false
          type: string
      required:
      - author
      - file
      - title
      type: object
    updateMetaData_request:
      properties:
        author:
          nullable: false
          type: string
        title:
          nullable: false
          type: string
      required:
      - author
      - title
      type: object
